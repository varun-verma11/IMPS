#include "assemble.h"

void readFromFile(char *filepath, struct Data *data) {
  FILE *fp;
  fp = fopen(filepath, "wb");
  if (fp==NULL) {
    perror("Error is writing to file");
    exit(EXIT_FAILURE);
  }
  data->a_instructions = malloc(sizeof(fp) * sizeof(char));
  char buffer[BUFFER_SIZE];
  int i=0;
  while((feof(fp)==0) && (i<=MEMORY_SIZE)) {
    fgets(buffer,sizeof(buffer), stdin);
    data->a_instructions[i] = buffer;
    memset(&buffer,' ' , sizeof(buffer));
    i++;    
  }
  fclose(fp); 
}

void writeToFile(char *filepath, struct Data *data) { 
  FILE *fp;
  fp = fopen(filepath, "wb");
  /*check if needed*/
  if (fp==NULL) {
    perror("Error is writing to file");
    exit(EXIT_FAILURE);
  }
	int num_of_elem_written = 0;
  int num_of_elem = data->number_of_instructions;
	num_of_elem_written = fwrite((data->b_instructions),sizeof(uint32_t), num_of_elem, fp);
	
	if (num_of_elem_written != num_of_elem) {
		perror("ERROR IN WRITING TO FILE");
		exit(EXIT_FAILURE);
 	}
  fclose(fp);
}
